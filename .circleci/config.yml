version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string  
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy backend stack
          when: on_fail
          command: |
            # aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws s3 rb --force s3://udapeople-<< parameters.workflowID >> 
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/K8deufxEQMDTGfRBmCGog5/migration_<< parameters.workflowID >>)
            echo $SUCCESS
            if(( $SUCCESS == "success" )); 
            then
              cd ./backend
              npm install
              npm run migrations:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
   
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical 
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            
      - run:
          name: Add backend ip to ansible inventory
          # working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 

  configure-infrastructure:
    docker:
      - image: python:3.8-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:9e:f8:f2:df:88:41:c0:73:31:9c:33:f4:0f:18:e0"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          # working_directory: ./.circleci/ansible
          command: |
            apk add --update tar gzip
            apk add --update openssh
            apk add --update curl
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ls .circleci/ansible
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure   

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install      
      - run:
          name: Run database migration
          command: |
            cd ./backend
            pwd
            ls 
            cat /.env
            npm install
            npm run migrations > migrations_dump.txt
            cat ./migrations_dump.txt
      - run:
          name: Send migration status to kvdb         
          command: |
            if grep "has been executed successfully" ./backend/migrations_dump.txt;
            then
              echo "Database migration has been executed successfully"
              curl -k https://kvdb.io/Nu6oBUD5FWeLekYt2usN4c/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'success'
            else
              echo "Database migration has failed, verify DB setup!"
              curl -k https://kvdb.io/Nu6oBUD5FWeLekYt2usN4c/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'failure'
            fi
      - persist_to_workspace:
          root: .
          paths:
            - backend/migrations_dump.txt
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  
        

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            yum install -y python3
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
            python3 -m pip -V
            if [ $? -eq 0 ]
            then
              python3 -m pip install --user ansible
            fi

      - run:
          name: Get backend url and setup environment variables
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "new API_URL to be baked into FE = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          key: frontend-build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls
            ls dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:9e:f8:f2:df:88:41:c0:73:31:9c:33:f4:0f:18:e0"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update npm ansible rsync openssh nodejs
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install awscli
      - restore_cache:
          key: backend-build
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/ .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook deploy-backend.yml -i inventory.txt
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - destroy_environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:latest 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:9e:f8:f2:df:88:41:c0:73:31:9c:33:f4:0f:18:e0"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Testing New backend server: ${API_URL} "
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run: 
          name: Run frontend smoke tests
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-2.amazonaws.com/#/employees"            
            echo "Testing New frontend app: ${URL} "
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 0
            fi
      - destroy_environment
      - revert_migrations

  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      working_directory: .
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Fetch and save the old workflow ID responsible for the last release.
            command: |
              OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              echo $OldWorkflowID > OldWorkflowID.txt
              cat OldWorkflowID.txt
        - run:
            name: Execute CloudFront template
            no_output_timeout: 30m
            command: |
              OldWorkflowID=$(cat OldWorkflowID.txt)
              aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
              echo "OldWorkflowID: ${OldWorkflowID}"
              echo "NewWorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}"
        - persist_to_workspace:
            root:  .
            paths:
              - OldWorkflowID.txt
        - destroy_environment
        - revert_migrations

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [main]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]