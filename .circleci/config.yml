version: 2.1

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

orbs: 
  aws-cli: circleci/aws-cli@3.1

commands:

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy created infrastructure if any job fails
          when: on_fail
          command: |
            echo "Destroying BE + FE infrastructure with workflowID --> << parameters.workflowID >>"
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>

  revert_migrations:
    description: Revert last migration
    parameters:
      workflowID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          when: on_fail
          name: Revert migrations
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/7HMEcsZ9ZHEr8PGWX4LWko/migration_<< parameters.workflowID >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi    
jobs:
  build_frontend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: "Compile frontend"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build

  build_backend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: "Compile backend"
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
  
  test_frontend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: "Unit tests for frontend"
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build

  test_backend:
    docker:
      - image: cimg/node:16.13.1
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: "Unit tests for backend"
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
  
  audit_frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: "Audit tests for frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build

  audit_backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: " tests for backend"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build

  deploy_infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} --tags project=udapeople
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project, Values=udapeople" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root:  ~/project
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment

  configure_infra:
    docker:
      - image: python:3.8-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:61:63:61:30:df:01:28:4a:25:aa:6f:58:1e:87:f1"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk add --update openssh
            apk add --update curl
            apk add --update ansible
      - run:
          name: Configure backend server
          command: |
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            cat ~/project/backend/.env
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
      - persist_to_workspace:
          root:  ~/project
          paths:
            - backend/.env
      - destroy_environment

  run_migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - attach_workspace:
          at: ~/project
      - run:
          name: Run migrations
          no_output_timeout: 30m
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Save migration status to key bucket
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/7HMEcsZ9ZHEr8PGWX4LWko/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              echo "New key was saved >>> migration_${CIRCLE_WORKFLOW_ID:0:7}"
            fi
      - persist_to_workspace:
          root:  ~/project
          paths:
            - backend/migrations_dump.txt
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - destroy_environment

  deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Python
          command: |
            yum install -y python3
      - run:
          name: Install Node and NPM
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
      - run:
          name: Install Ansible
          command: |
            python3 -m pip -V
            if [ $? -eq 0 ]
            then
              python3 -m pip install --user ansible
            fi
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "new API_URL to be baked into FE = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          key: frontend-build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            # tar -czvf artifact-f3bc2ad.tar.gz dist
            # aws s3 cp dist s3://udapeople-f3bc2ad --recursive
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build
      - destroy_environment
      - revert_migrations

  deploy_backend:
    docker:
      - image: python:3.7-alpine3.16
      # - image: cimg/python:3.7-node
    working_directory: ~/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:61:63:61:30:df:01:28:4a:25:aa:6f:58:1e:87:f1"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Dependencies
          command: |
            apk add --update tar gzip curl openssh
            apk add --update nodejs npm
            apk add --update ansible
      - restore_cache:
          key: backend-build
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook deploy-backend.yml -i inventory.txt
      - save_cache:
          paths: [backend/node-modules]
          key: backend-build
      - destroy_environment
      - revert_migrations

  smoke_tests:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:61:63:61:30:df:01:28:4a:25:aa:6f:58:1e:87:f1"]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/project
      - run: 
          name: Run backend smoke tests
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Testing New backend server: ${API_URL} "
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run: 
          name: Run frontend smoke tests
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo "Testing New frontend app: ${URL} "
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy_environment
      - revert_migrations

  cloudfront_update:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/project
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old workflow ID responsible for the last release.
          command: |
            OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkflowID > OldWorkflowID.txt
            cat OldWorkflowID.txt
      - run:
          name: Execute CloudFront template
          no_output_timeout: 30m
          command: |
            OldWorkflowID=$(cat OldWorkflowID.txt)
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name cloudfrontStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "NewWorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root:  ~/project
          paths:
            - OldWorkflowID.txt
      - destroy_environment
      - revert_migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Clean up previous stacks
          command: |
            OldWorkflowID=$(cat OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Destroying PREVIOUS BE + FE infrastructure with workflowID --> ${OldWorkflowID}"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              echo "---------- Deleted previous infrastructure ----------"
            else
              echo "This is the new BE + FE infrastructure: workflowID --> ${CIRCLE_WORKFLOW_ID:0:7}"
            fi
      # - destroy_environment
      # - revert_migrations


workflows:
  release:
    # when:
    #   equal: [ "published", << pipeline.parameters.GHA_Action >>]
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - audit_frontend:
          requires: [build_frontend]
      - audit_backend:
          requires: [build_backend]
      # - deploy_infra:
      #     requires: [test_backend, test_frontend, audit_backend, audit_frontend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure_infra:
      #     requires: [deploy_infra]
      # - run_migrations:
      #     requires: [configure_infra]
      # - deploy_frontend:
      #     requires: [run_migrations]
      # - deploy_backend:
      #     requires: [run_migrations]
      # - smoke_tests:
      #     requires: [deploy_frontend, deploy_backend]
      # - cloudfront_update:
      #     requires: [smoke_tests]
      # - cleanup:
      #     requires: [cloudfront_update]
    
  # build:
  #   jobs:
  #     - build_frontend
  #     - build_backend
  #     - test_frontend:
  #         requires: [build_frontend]
  #     - test_backend:
  #         requires: [build_backend]
  #     - audit_frontend:
  #         requires: [build_frontend]
  #     - audit_backend:
  #         requires: [build_backend]