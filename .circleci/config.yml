version: 2.1

commands:
  install-dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  destroy-environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroying environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://api.thisdb.com/v1/${THISDB_BUCKET}/migration-<< parameters.workflow_id >>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-backend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Installing dependencies
          command: |
            cd backend
            npm install
      - save_cache:
          key: backend-build
          paths:
            - backend/node_modules

  build-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Installing dependencies
          command: |
            cd frontend
            npm install
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules

  test-backend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Testing backend
          command: |
            cd backend
            npm run test

  test-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm run test

  scan-backend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm audit fix --audit-level=critical 

  scan-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical 

  provision-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Provisioning back-end infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file ./infra/cloudformation/backend.yml \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Provisioning front-end infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --template-file ./infra/cloudformation/frontend.yml \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Adding backend IP to inventory.txt
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ./infra/ansible/inventory.txt
            cat ./infra/ansible/inventory.txt
            # aws cloudformation describe-stacks \
            # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            # --query "Stacks[0].Outputs[0].OutputValue" \
            # --output text >> ./infra/ansible/inventory.txt
            # cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./infra/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  configure-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'ba:9e:f8:f2:df:88:41:c0:73:31:9c:33:f4:0f:18:e0'
      - attach_workspace:
          at: ./infra/ansible/
      - install-dependencies
      - run:
          name: Configuring server
          command: |
            cd infra/ansible/
            ansible-playbook configure-server.yml
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  run-migrations:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Running migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Sending migration status to thisdb.com
          command: |
            if grep -q "has been executed successfully" ./backend/migrations_dump.txt
            then
              curl "https://api.thisdb.com/v1/${THISDB_BUCKET}/migration-${CIRCLE_WORKFLOW_ID:0:7}" \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl "https://api.thisdb.com/v1/${THISDB_BUCKET}/migration-${CIRCLE_WORKFLOW_ID:0:7}" \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  deploy-backend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - attach_workspace:
          at: ./infra/ansible/
      - add_ssh_keys:
          fingerprints:
            - 'b5:f4:85:77:e1:ad:c2:fb:78:ef:49:cd:c8:60:41:e5'
      - install-dependencies
      - run:
          name: Packaging backend
          command: |
            printenv | grep "TYPEORM" > ./backend/.env
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ./infra/ansible/roles/deploy/files/
            mv artifact.tar.gz ./infra/ansible/roles/deploy/files/
      - run:
          name: Deploying backend
          command: |
            cd infra/ansible/
            ansible-playbook deploy-backend.yml
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - install-dependencies
      - run:
          name: Getting backend url
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}" >> frontend/.env
      - run:
          name: Deploying frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact.tar.gz ./dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  smoke-test:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Checking backend
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
            API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Checking frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com"            
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
              --stack-name InitialStack \
              --template-file ./infra/cloudformation/cloudfront.yml \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  cleanup:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Removing old stacks and files
          command: |
            BUCKETS=$(curl "https://api.thisdb.com/v1/${THISDB_BUCKET}" \
              -H "X-Api-Key: ${THISDB_API_KEY}")

            if [[ $BUCKETS =~ latest-stack ]]; then
              LATEST_STACK_ID=$(curl "https://api.thisdb.com/v1/${THISDB_BUCKET}/latest-stack" -H "X-Api-Key: ${THISDB_API_KEY}")
              CURRENT_STACK_ID="${CIRCLE_WORKFLOW_ID:0:7}"

              echo "LATEST_STACK_ID: $LATEST_STACK_ID"
              echo "CURRENT_STACK_ID: $CURRENT_STACK_ID"

              aws cloudformation delete-stack --stack-name "udapeople-frontend-${LATEST_STACK_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${LATEST_STACK_ID}"
              aws s3 rm "s3://udapeople-${LATEST_STACK_ID}" --recursive
            else
              echo "Skipping..."
            fi
      - run:
          name: Storing current stack workflow id
          command: |
            curl "https://api.thisdb.com/v1/${THISDB_BUCKET}/latest-stack" \
              -H "X-Api-Key: ${THISDB_API_KEY}" \
              -d "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - provision-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      - provision-infrastructure
      - configure-infrastructure:
          requires: [provision-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
