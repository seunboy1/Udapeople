version: 2.1

# orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3

# resuable job code like functions in python
commands:
  print_pipeline_id:
    description: "A very simple command for printing pipeline id"
    parameters:
      id:
        type: string
        default: "123" 
    steps:
      - run: echo << parameters.id >>

jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello,"

  save_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Save world output"
          command: echo " world!" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Print world output"
          command: cat ~/output.txt

  print_id_from_command:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - print_pipeline_id:
          id: << pipeline.id >>

  print_var:
    docker:
      - image: cimg/base:2021.11
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo $MY_NAME
  
  test_fail:
    docker:
      - image: cimg/base:2021.11
    steps:
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail
  
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1

workflows:
  my_workflow:
    jobs:
      - print_hello
      - save_world_output:
          requires: [print_hello]
      - print_output_file:
          requires: [save_world_output]
      - print_var
      - print_id_from_command
      - create_infrastructure
      - test_fail:
          requires: [create_infrastructure]